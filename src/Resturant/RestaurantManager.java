package Resturant;import java.util.Scanner;import java.util.List;import java.util.ArrayList;public class RestaurantManager {    private final Scanner scanner;    private MenuPrinter menuOps;    public RestaurantManager(Scanner scanner) {        this.scanner = scanner;        this.menuOps = new MenuPrinter();    }    public void initializeTableNumber() {        String tableNumber = "";        while (tableNumber.trim().isEmpty()) {            System.out.print("Please enter table number: ");            tableNumber = scanner.nextLine();            if (tableNumber.trim().isEmpty()) {                System.out.println("Table number cannot be empty. ");            }        }        menuOps.setTableNumber(tableNumber);        System.out.println("=====================================");        System.out.println("Current table  number is :" + menuOps.getTableNumber());        System.out.println("=====================================");    }    public void printMainMenu() {        System.out.println("\n---Choose your next option: ---");        System.out.println("1. Display menu and place orders ");        System.out.println("2. Display current orders ");        System.out.println("3. Save invoice");        System.out.println("4. Manage payment");        System.out.println("5. Exit");        System.out.print(" Enter your choice: ");    }    public int handleMenuAndOrderInteraction() {        boolean choosingCategories = true;        int exitStatus = 0;        while (choosingCategories) {            menuOps.printCategories();            System.out.println("-------------------------");            System.out.println(" Choose desired category according to its number, or '0' to go back");            System.out.print("Enter your choice: ");            try {                int categoryChoice = Integer.parseInt(scanner.nextLine());                if (categoryChoice == 0) {                    System.out.println("Redirecting to main menu... ");                    choosingCategories = false;                    exitStatus = 0;                } else {                    String selectedCategoryName = menuOps.getCategoryName(categoryChoice);                    if (selectedCategoryName != null) {                        int itemInteractionResult = handleCategoryItemsInteraction(selectedCategoryName);                        if (itemInteractionResult == 1) {                            choosingCategories = false;                            exitStatus = 1;                        } else if (itemInteractionResult == 0) {                            choosingCategories = false;                            exitStatus = 0;                        }                    } else {                        System.out.println("Unable to process your choice, please try again.");                    }                }            } catch (NumberFormatException e) {                System.out.println("Unable to process your choice, please try again.");            }        }        return exitStatus;    }    private int handleCategoryItemsInteraction(String categoryName) {        boolean choosingItems = true;        int returnStatus = 2;        while (choosingItems) {            menuOps.printMenuForCategory(categoryName);            System.out.println("-------------------------");            System.out.println("Choose desired dish according to its number, or '0' to redirect to the categories ");            System.out.print("Enter your choice: ");            try {                int itemChoice = Integer.parseInt(scanner.nextLine());                if (itemChoice == 0) {                    System.out.println("Redirecting to category menu...");                    choosingItems = false;                    returnStatus = 2;                } else if (menuOps.isValidChoice(categoryName, itemChoice)) {                    String itemName = menuOps.getItemName(categoryName, itemChoice);                    double itemPrice = menuOps.getItemPrice(categoryName, itemChoice);                    MenuItem selectedMenuItem = menuOps.getMenuItem(categoryName, itemChoice);                    System.out.printf("You chose: %s - price: %.2f ש\"ח%n", itemName, itemPrice);                    List<String> customIngredients = new ArrayList<>(selectedMenuItem.getIngredients());                    boolean customizeDecided = false;                    while (!customizeDecided) {                        System.out.print("Would you like to personalise this order? (yes/no) ");                        String customizeInput = scanner.nextLine();                        if (customizeInput.equalsIgnoreCase("yes")) {                            customIngredients = menuOps.customizeIngredients(scanner, selectedMenuItem);                            customizeDecided = true;                        } else if (customizeInput.equalsIgnoreCase("no")) {                            System.out.println("Original ingredients have been saved. ");                            customizeDecided = true;                        } else {                            System.out.println("Unable to process your choice, please try again.");                        }                    }                    boolean confirmChoice = false;                    while (!confirmChoice) {                        System.out.println(" Would you like to add this dish to your order? (yes/no) ");                        String confirmInput = scanner.nextLine();                        if (confirmInput.equalsIgnoreCase("yes")) {                            menuOps.addItemToOrder(categoryName, itemChoice, customIngredients);                            System.out.println(itemName + "  has been successfully added to your order.");                            System.out.println(" with ingredients: " + String.join(", ", customIngredients));                            confirmChoice = true;                        } else if (confirmInput.equalsIgnoreCase("no")) {                            System.out.println("Dish was not added to your order. ");                            confirmChoice = true;                        } else {                            System.out.println("Unable to process your choice, please try again.");                        }                    }                    boolean nextStepDecided = false;                    while (!nextStepDecided) {                        System.out.println(" ");                        System.out.println("\n--- What would you like to do next? ---");                        System.out.println("1. Order more dishes from current category");                        System.out.println("2. Redirect to category menu");                        System.out.println("3. Finalise order and pay (via main menu)");                        System.out.print(" Enter your choice: ");                        String nextStepInput = scanner.nextLine();                        switch (nextStepInput) {                            case "1":                                nextStepDecided = true;                                break;                            case "2":                                choosingItems = false;                                returnStatus = 2;                                nextStepDecided = true;                                break;                            case "3":                                System.out.println(" ");                                System.out.println("Ending your order... redirecting to the main menu.");                                choosingItems = false;                                returnStatus = 0;                                nextStepDecided = true;                                break;                            default:                                System.out.println("Unable to process your choice, please try again.");                                break;                        }                    }                } else {                    System.out.println("Unable to process your choice, please try again.");                }            } catch (NumberFormatException e) {                System.out.println("Unable to process your choice, please try again.");            }        }        return returnStatus;    }    public void displayCurrentOrderSummary() {        menuOps.displayOrderSummary();    }    //     מתודת התשלום משתנה כדי להשתמש ב-ReceiptGenerator    public boolean handlePayment() {        if (menuOps.getCurrentOrder().isEmpty()) {            System.out.println(" Order is empty, unable to access payment options.");            return false;        }        // יצירת אובייקט ReceiptGenerator עם כל המידע הדרוש        ReceiptGenerator receiptGen = new ReceiptGenerator(                menuOps.getCurrentOrder(),                menuOps.getAllMenuItemsNamesByCategory(),                menuOps.getAllMenuItemsPricesByCategory(),                menuOps.getTableNumber()        );        // תהליך הוספת טיפ        boolean tipDecided = false;        double subTotal = receiptGen.getSubTotal(); // קבלת subTotal מה-ReceiptGenerator        while (!tipDecided) {            System.out.print("\nWould you like to add a tip? (yes/no) ");            String addTipChoice = scanner.nextLine();            if (addTipChoice.equalsIgnoreCase("yes")) {                boolean validTipPercentage = false;                while (!validTipPercentage) {                    System.out.print(" Enter your desired tip percentage:  ");                    try {                        double tipPercentage = Double.parseDouble(scanner.nextLine());                        if (tipPercentage >= 0) {                            double tipAmount = subTotal * (tipPercentage / 100.0);                            receiptGen.setTipAmount(tipAmount); // הגדרת הטיפ ב-ReceiptGenerator                            System.out.printf("You have added tip of: %.2f ש\"ח (%.0f%%)%n", tipAmount, tipPercentage);                            validTipPercentage = true;                        } else {                            System.out.println("Tip amount has to be positive. ");                        }                    } catch (NumberFormatException e) {                        System.out.println("Unable to process your choice, please try again.");                    }                }                tipDecided = true;            } else if (addTipChoice.equalsIgnoreCase("no")) {                System.out.println("You have not added a tip.");                receiptGen.setTipAmount(0.0); // וודא שאין טיפ                tipDecided = true;            } else {                System.out.println("Unable to process your choice, please try again.");            }        }        // ביצוע התשלום בפועל דרך ReceiptGenerator        boolean paymentSuccessful = receiptGen.processPayment(scanner);        // אם התשלום הצליח, ננקה את ההזמנה ב-MenuPrinter        if (paymentSuccessful) {            menuOps.clearCurrentOrder();        }        return paymentSuccessful;    }    public boolean isOrderEmpty() {        return menuOps.getCurrentOrder().isEmpty();    }    public String getTableNumber() {        return menuOps.getTableNumber();    }}